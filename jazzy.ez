#!/usr/bin/python
from sjf.common import *
import os, sys, shlex, binascii, re

rawfile = ''
filefuzz_file = '/dev/shm/file.fuzz'
def add(line):
	global rawfile
	rawfile += line + "\n"

# figlet
def main():
	global rawfile
#	global SW_VERSION
	fpath = os.path.dirname(os.path.realpath(__file__))
#	info(SW_VERSION)
	info("Note: Dis but a helper script, to make it easier to create skeleton fuzz configs")
	info("      Check ./templates")
	msg("Oh hai! Let's see what we have here...")
	msg("The command is: " + str(sys.argv[1:]))
	msg("Now select the fuzzvector")
	fuzz_functs = [
		genfuzz_params,
		genfuzz_stdin,
		genfuzz_env,
		genfuzz_text_file,
		genfuzz_binary_file,
#		genfuzz_filename,		# ummm.. maybe
		genfuzz_tcp_service,
		genfuzz_tcp_client,

		genfuzz_udp_service,
		genfuzz_udp_client,
	]
	fuzz_methods = {}
	for i,ff in enumerate(fuzz_functs):
		fuzz_methods[i] = ff
	hdr("%3s | %-16s | %s" % ('idx', 'vector', 'comment'))
	for i in fuzz_methods:
		msg("%3d | %-16s | %s" % (i, fuzz_methods[i].__name__[8:], fuzz_methods[i].__doc__))
	try:
		c = raw_input("tell me: ")
		c = int(c)
	except:
		die('invalid choice')
		sys.exit(1)
	fuzz_methods[c]()

	msg('okay, heres your fuzzfile, check it pls')
	print rawfile
	rawfile_name = '.autofuzz.'+os.path.basename(sys.argv[1])
	with open(rawfile_name,'w') as f:
		f.write(rawfile)
	c = raw_input("can I start fuzzing with this? type 'yes': ")
	cmd = fpath + '/jazzy ' + rawfile_name
	if c == 'yes':
		msg('executing this: ' + cmd)
		os.system(cmd)
	else:
		msg('okay, run this if you ready: ' + cmd)



def genfuzz_binary_file():
	"""Not implemented (yet)"""
	pass

def genfuzz_filename():
	"""Not implemented (yet)"""
	pass


def genfuzz_udp_service():
	pass
def genfuzz_udp_client():
	pass




#  _____ ____ ____     ____ _ _            _   
# |_   _/ ___|  _ \   / ___| (_) ___ _ __ | |_ 
#   | || |   | |_) | | |   | | |/ _ \ '_ \| __|
#   | || |___|  __/  | |___| | |  __/ | | | |_ 
#   |_| \____|_|      \____|_|_|\___|_| |_|\__|

def genfuzz_tcp_client():
	"""Attacking TCP clients (4xmpl: ftp, telnet)"""
	argv = sys.argv[1:]
	add('attack tcpclient')
	if len(argv) > 0:
		msg('The command to run the client: %s' % argv)
		add('command %s' % ' '.join(argv))
	else:
		die('no command')
	ipport = raw_input("Gimme the IP:port (or just press enter if it's 127.0.0.1:80): ")
	if len(ipport) == 0:
		ipport = '127.0.0.1:80'
	add('listen ' + ipport)
	add('[fuzzdata]')
	msg('type something to send to the client')
	row = None
	tcp_send_rows = []
	while 1:
		try:
			row = raw_input("> ")
			tcp_send_rows.append(row)
		except EOFError:
			print ''
			break
	fields = []
	for row in tcp_send_rows:
		row_fields = row.split(' ')
		for field in row_fields:
			fields.append(field)
			fields.append('\\x20')
		fields.pop()
		fields.append('\\x0a')
	for i, f in enumerate(fields):
		msg("%-2d : %s" % (i, f))
	c = raw_input("which fields (space delimited): ").split(' ')
	for i, val in enumerate(fields):
		dump([val, val[0:2]])
		typ = '-str'
		var = ''
		if str(i) in c:
			dump('!!! ' + val)
			var = '-var'
		if val[0:2] == '\\x':
			val = val[2:]
			typ = '-bin'
		if typ == '-str':
			val = '"' + val + '"'
		add('%04s %04s -val %s' % (var, typ, val))
	
	
	




#  _____ ____ ____    ____                  _          
# |_   _/ ___|  _ \  / ___|  ___ _ ____   _(_) ___ ___ 
#   | || |   | |_) | \___ \ / _ \ '__\ \ / / |/ __/ _ \
#   | || |___|  __/   ___) |  __/ |   \ V /| | (_|  __/
#   |_| \____|_|     |____/ \___|_|    \_/ |_|\___\___|
def genfuzz_tcp_service():
	"""Attacking TCP services (4xmpl: ftpd, httpd, etc)"""
	argv = sys.argv[1:]
	add('attack tcpservice')
#	dump(argv)
	if len(argv) > 0:
		msg('Yarr! the command to run the service: %s' % argv)
		add('command %s' % ' '.join(argv))
	else:
		msg('no command to run the service')
	ipport = raw_input("Gimme the IP:port (or just press enter if it's 127.0.0.1:80): ")
	if len(ipport) == 0:
		ipport = '127.0.0.1:80'
#	ip, port = ipport.split(':')
#	port = int(port)
	add('connect ' + ipport)
	add('[fuzzdata]')
	msg('type the tcp request')
	row = None
	tcp_send_rows = []
	while 1:
		try:
			row = raw_input("> ")
			tcp_send_rows.append(row)
		except EOFError:
			print ''
			break
	fields = []
	for row in tcp_send_rows:
		row_fields = row.split(' ')
		for field in row_fields:
			fields.append(field)
			fields.append('\\x20')
		fields.pop()
		fields.append('\\x0a')
	for i, f in enumerate(fields):
		msg("%-2d : %s" % (i, f))
	c = raw_input("which fields (space delimited): ").split(' ')
	for i, val in enumerate(fields):
		dump([val, val[0:2]])
		typ = '-str'
		var = ''
		if str(i) in c:
			dump('!!! ' + val)
			var = '-var'
		if val[0:2] == '\\x':
			val = val[2:]
			typ = '-bin'
		if typ == '-str':
			val = '"' + val + '"'
		add('%04s %04s -val %s' % (var, typ, val))


		
# _____         _   _____ _ _      
#|_   _|____  _| |_|  ___(_) | ___ 
#  | |/ _ \ \/ / __| |_  | | |/ _ \
#  | |  __/>  <| |_|  _| | | |  __/
#  |_|\___/_/\_\\__|_|   |_|_|\___|
def genfuzz_text_file():
	"""fuzzing file contents, 4xmpl.: /usr/bin/stupidprogram --cfg /tmp/inputfile"""
	argv = sys.argv[1:]

	alert('WARNING! The file will be overwritten during the fuzz!')
	info('I also recommend putting this file into /dev/shm/')

	add('attack textfile')
	add('command %s' % ' '.join(argv))
#	for i, arg in enumerate(argv):
#		msg("%-2d : %s" % (i, arg))
	files = {}
	for i, arg in enumerate(argv):
		var = ''
		pfx = ''
		if '=' in arg:
			pfx, arg = arg.split('=')
			pfx = '-pfx "' + pfx + '="'
		if os.path.isfile(arg):
			msg("%-2d : %s%s" % (i, pfx, arg))
			files[i] = arg
		else:
			grey("%-2d : %s" % (i, arg))
	c = int(raw_input("which one is the file?: "))
	add('file "%s"' % files[c])
	with open(files[c]) as f:
		lines = f.readlines()

	add('[fuzzdata]')

	strip_lines = []
	for linenum, line in enumerate(lines):
		strip_lines.append(line.strip())
		msg("%-3d : %s" % (linenum, line.strip()))
	lines = strip_lines
	linenums = raw_input("first, select the lines containing fuzzable fields: ").split(' ')
	msg("now mark the fuzzable sections in line %d (by using the space/* characters)" % linenum)
	parsed_line = {} 
	for linenum in linenums:
		linenum = int(linenum)
		line = lines[linenum]
		print           ("line %-4d>%s<" % (linenum, line))
		mark = raw_input("fields   >")
		
		parsed_line[linenum] = []
		m = re.finditer(r'([^ ]+)', mark)
		prev = 0
		for x in m:
			start, end = x.span()
			val = line[start:end]
			if start == 0:
				parsed_line[linenum].append("-var -name line_%d_%d -val \"%s\"" % (linenum, start, val))
			else:
				pfx = line[prev:start]
				parsed_line[linenum].append("-var -name line_%d_%d -val \"%s\" -pfx \"%s\"" % (linenum, start, val, pfx))
			prev = end
		etc = line[end:len(line)]
		parsed_line[linenum].append("-bin -name line_%d -val %s0a" % (linenum, binascii.hexlify(etc)))

	for linenum, line in enumerate(lines):
		if str(linenum) in linenums:
			for idx, field in enumerate(parsed_line[linenum]):
				add(field)
		else:
			add("-bin -name line_%d -val %s0a" % (linenum, binascii.hexlify(line)))

	


#  ____                               
# |  _ \ __ _ _ __ __ _ _ __ ___  ___ 
# | |_) / _` | '__/ _` | '_ ` _ \/ __|
# |  __/ (_| | | | (_| | | | | | \__ \
# |_|   \__,_|_|  \__,_|_| |_| |_|___/
def genfuzz_params():
	"""fuzzing parameters, 4xmpl: /bin/command -a 1 -b something --format=blah"""
	add('attack params')
	add('[fuzzdata]')
	argv = sys.argv[1:]
	for i, arg in enumerate(argv):
		msg("%-2d : %s" % (i, arg))
	c = raw_input("which fields (space delimited): ").split(' ')
	for i, arg in enumerate(argv):
		var = ''
		pfx = ''
		if str(i) in c:
			var = '-var'
			if '=' in arg:
				pfx, arg = arg.split('=')
				pfx = '-pfx "' + pfx + '="'
		add("%4s -str -name arg%02x -val \"%s\" %s" % (var, i, arg, pfx))


                 
#  _____            _                                      _   
# | ____|_ ____   _(_)_ __ ___  _ __  _ __ ___   ___ _ __ | |_ 
# |  _| | '_ \ \ / / | '__/ _ \| '_ \| '_ ` _ \ / _ \ '_ \| __|
# | |___| | | \ V /| | | | (_) | | | | | | | | |  __/ | | | |_ 
# |_____|_| |_|\_/ |_|_|  \___/|_| |_|_| |_| |_|\___|_| |_|\__|
def genfuzz_env():
	"""fuzzing environment variables"""
	add('attack env')
	argv = sys.argv[1:]
	add('command "%s"' % ' '.join(argv))
	add('[fuzzdata]')
	for i, env in enumerate(os.environ):
		msg("%-2d : %s" % (i, env))
	c = raw_input("which fields (space delimited): ").split(' ')
	for i, env in enumerate(os.environ):
		var = ''
		if str(i) in c:
			var = '-var'
		add("%4s -str -name \"%s\" -val \"%s\"" % (var, env, os.environ[env]))

#  ____  _      _ _       
# / ___|| |_ __| (_)_ __  
# \___ \| __/ _` | | '_ \ 
#  ___) | || (_| | | | | |
# |____/ \__\__,_|_|_| |_|
def genfuzz_stdin():
	"""fuzzing stdin"""
	add('attack stdin')
	argv = sys.argv[1:]
	add('command "%s"' % ' '.join(argv))
	add('[fuzzdata]')
	msg('gimme the stdin payload.')
	row = None
	stdin_rows = []
	while 1:
		try:
			row = raw_input("> ")
			stdin_rows.append(row)
		except EOFError:
			print ''
			break
	fields = []
	for row in stdin_rows:
		row_fields = row.split(' ')
		for field in row_fields:
			fields.append(field)
			fields.append('\\x20')
		fields.pop()
		fields.append('\\x0a')
	for i, f in enumerate(fields):
		msg("%-2d : %s" % (i, f))
	c = raw_input("which fields (space delimited): ").split(' ')
	for i, val in enumerate(fields):
		dump([val, val[0:2]])
		typ = '-str'
		var = ''
		if str(i) in c:
			dump('!!! ' + val)
			var = '-var'
		if val[0:2] == '\\x':
			val = val[2:]
			typ = '-bin'
		if typ == '-str':
			val = '"' + val + '"'
		add('%04s %04s -val %s' % (var, typ, val))
		
	

if __name__ == '__main__':
	main()










